 SELECT
B.SUBJ_NAME,
C.DBDNAM,
D.DBTYPE_NAME,
A.SOURCE_NAME AS TABLE_NAME,
A.FILE_NAME SCHEMA_NAME,
A.OWNERNAME
FROM
OPB_SRC A,OPB_SUBJECT B, OPB_DBD C,OPB_MMD_DBTYPE D
WHERE A.SUBJ_ID = B.SUBJ_ID
AND A.DBDID = C.DBDID
AND C.DBTYPE = D.DBTYPE_ID
--AND A.SOURCE_NAME <> A.FILE_NAME
ORDER BY 1,2,3,4,5



8.23 List of session run history â€“ Long running sessions

SELECT   subject_area, workflow_name, instance_name,
         TO_CHAR (start_time, 'Dy MM/DD/YYYY HH:MI:SS AM') start_time,
         TO_CHAR (end_time, 'Dy MM/DD/YYYY HH:MI:SS AM') end_time,
         ROUND (((end_time - start_time) * 24) * 60) elapsed
    FROM rep_task_inst_run
   WHERE task_type = 68
     AND start_time > TO_DATE ('01/01/2012', 'mm/dd/yyyy')
--     AND subject_area = 'ABC' AND workflow_name='wfc_dly'
ORDER BY 1, 2


select  d.object_type_name, c.instance_name, c.widget_name, c.applied_rows, c.affected_rows,

c.rejected_rows, c.thruput, c.last_err_msg, c.last_err_code, c.start_time, c.end_time
 
from opb_swidginst_log c, opb_object_type d

where c.widget_type = d.object_type_id



TO_CHAR(TRUNC((EndTime - StartTime) * 24), 'FM00') || ':' ||
    TO_CHAR(MOD(EXTRACT(MINUTE FROM (EndTime - StartTime)), 60), 'FM00') AS TimeDifference
FROM TimeRecords;

SELECT
    StartTime,
    EndTime,
    TO_CHAR(TRUNC((EndTime - StartTime) * 24), 'FM00') || ':' ||
    TO_CHAR(TRUNC(MOD((EndTime - StartTime) * 24 * 60, 60)), 'FM00') AS TimeDifference
FROM TimeRecords;



SELECT *

  FROM (SELECT s.subj_name subject_area, 'Mapping' parent_type,

               m.mapping_name, t.object_type_name object_type,

               wi.instance_name object_name, u.user_name, p.saved_from,

               p.last_saved last_saved

          FROM opb_widget w,

               opb_object_type t,

               opb_widget_inst wi,

               opb_mapping m,

               opb_subject s,

               opb_version_props p,

               rep_users u

         WHERE w.widget_type = t.object_type_id

           AND w.widget_id = wi.widget_id

           AND w.widget_type = wi.widget_type

           AND wi.mapping_id = m.mapping_id

           AND m.subject_id = s.subj_id

           AND w.widget_id = p.object_id

           AND w.widget_type = p.object_type

           AND p.user_id = u.user_id

        UNION

        SELECT DISTINCT ISNULL (w.subject_area, 'UNKNOWN') subject_area,

                        w.task_type_name parent_type,

                        ISNULL (w.task_name, 'UNKNOWN') parent_name,

                        ti.task_type_name object_type,

                        ti.instance_name object_name, u.user_name,

                        p.saved_from,

                        p.last_saved

                   FROM rep_task_inst ti INNER JOIN

                        rep_version_props p ON (  ti.task_type = p.object_type

                    AND ti.task_id = p.object_id) LEFT OUTER JOIN

                        (SELECT subject_area, task_name, task_id,

                                task_type_name

                           FROM rep_all_tasks

                          WHERE task_type_name IN ('Workflow', 'Worklet')) w ON ti.workflow_id = w.task_id INNER JOIN

                        rep_users u ON  p.user_id = u.user_id

                                    ) tab



TRUNC(SUM(EXTRACT(DAY FROM (end_time - start_time)) * 24 * 60
            + EXTRACT(HOUR FROM (end_time - start_time)) * 60
            + EXTRACT(MINUTE FROM (end_time - start_time)))) 
;

SELECT
    s.username AS os_user,
    s.module,
    q.sql_text,
    q.elapsed_time / 1000000 AS elapsed_seconds
FROM
    v$sql q
JOIN
    v$session s ON q.address = s.sql_address AND q.hash_value = s.sql_hash_value
WHERE
    q.command_type = 2 -- 2 represents UPDATE command
    AND q.elapsed_time > 1000000 -- Adjust this value based on your requirements (microseconds)
ORDER BY
    q.elapsed_time DESC;


SELECT
    sa.USERNAME AS os_user,
    sa.MODULE,
    st.SQL_TEXT,
    SUM(ss.ELAPSED_TIME_DELTA)/1000000 AS total_elapsed_seconds
FROM
    DBA_HIST_SQLSTAT ss
JOIN
    DBA_HIST_SQLTEXT st ON ss.SQL_ID = st.SQL_ID
JOIN
    DBA_HIST_ACTIVE_SESS_HISTORY sa ON ss.SQL_ID = sa.SQL_ID
WHERE
    st.SQL_TEXT LIKE '%UPDATE%' -- Filter for update queries
    AND ss.ELAPSED_TIME_DELTA > 1000000 -- Adjust threshold as needed
GROUP BY
    sa.USERNAME, sa.MODULE, st.SQL_TEXT
ORDER BY
    total_elapsed_seconds DESC;

